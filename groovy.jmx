<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="log" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def testvar = &quot;Simple test&quot;;

log.info(testvar);
log.info(&quot;This is simple message &quot; + testvar);
log.warn(&quot;This is simple warn level info: &quot; + &quot;some test&quot;);
log.error(&quot;This is the log for ERROR level&quot;);


</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="println" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def testvar = &quot;simple test&quot;;
OUT.println(&quot;Use out.println to print message:  &quot; + testvar);
println(&quot;Use println to log message: &quot; + testvar);
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="vars" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
vars.put(&quot;test_var_name&quot;,&quot;simple test&quot;);
def new_var = vars.get(&quot;test_var_name&quot;);
log.info(&quot;The value of new_var is &quot; + new_var);

vars.put(&quot;a&quot;, &quot;1&quot;);
def b = 10085;
def a_add_b = vars.get(&quot;a&quot;).toInteger() + b;
log.info(&quot;The sum of a + b is: &quot; + a_add_b);
vars.put(&quot;number&quot;, a_add_b.toString());
// follows line will be error
//vars.put(&quot;number_not_string&quot;, a_add_b);







</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="getorputobject" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def simpleAdd = { a,b -&gt; a + b }
 
//put the function simpleAdd into Object simpleSum
vars.putObject(&quot;simpleSum&quot;, simpleAdd);

//get object
def newAdd = vars.getObject(&quot;simpleSum&quot;);
 
//create a variable testResult and calculate 1 + 10085
def testResult = newAdd(1,10085);
 
log.info(&quot;The result of 1 + 10085 = &quot; + testResult);</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="props" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;The START.MS is &quot; + props.get(&quot;START.MS&quot;));
log.info(&quot;The current jmeter.version is &quot; + props.get(&quot;jmeter.version&quot;));
//create new property
props.put(&quot;prop_var&quot;,&quot;simple test&quot;)
log.info(&quot;The my props is &quot; + props.get(&quot;prop_var&quot;));
//update the existed property 5.1.1 r1855137
props.put(&quot;prop_var&quot;,&quot;testt&quot;)
log.info(&quot;The my props is &quot; + props.get(&quot;prop_var&quot;));

log.info(&quot;线程组名字 &quot; + prev.getThreadName())
log.info(&quot;my var is: &quot; + vars.get(&quot;a&quot;));


</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="false"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="test props and vars" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// output: Another Thread Group call my vars:  null
log.info(&quot;Another Thread Group call my vars:  &quot; + vars.get(&quot;a&quot;));

//Another Thread Group call my vars:  null
log.info(&quot;Another Thread Group call my props:  &quot; + props.get(&quot;prop_var&quot;));
</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SampleResult" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

//set Sample Label
SampleResult.setSampleLabel(&quot;This test is modified by JSR223 script&quot;);
 
//set Start Time
def start = System.currentTimeMillis(); //return current time in milliseconds
SampleResult.setStartTime(start); // set StartTime
log.info(&quot;Start Time : &quot; + (new Date(start)).toString()); //print the start time in Date format
//set Response Code
SampleResult.setResponseCode(&quot;201&quot;);
//set Response Message
SampleResult.setResponseMessage(&quot;Simple test via JSR223 script&quot;);
//set Response Data
SampleResult.setResponseData(&quot;Set simple data&quot;, &quot;UTF-8&quot;)
log.info( &quot;The Sample Label is : &quot; + SampleResult.getSampleLabel() );
log.info( &quot;The Start Time in miliseconds is : &quot; + SampleResult.getStartTime() );
log.info( &quot;The Response Code is : &quot; + SampleResult.getResponseCode() );
log.info( &quot;The Response Message is : &quot; + SampleResult.getResponseMessage() );
log.info( &quot;The Response Data is : &quot; + SampleResult.getResponseData() );
log.info( &quot;The Response Data String is : &quot; + SampleResult.getResponseDataAsString() );
AssertionResult assertionResult = new AssertionResult(&quot;JSR223 set assert&quot;).setResultForFailure(&quot;Error msg&quot;);
assertionResult.setError(true);
assertionResult.setFailure(true);
SampleResult.addAssertionResult(assertionResult);


log.info( &quot;The Response getAssertionResults is : &quot; + SampleResult.getAssertionResults() );
 
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Prev" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

//set Sample Label
prev.setSampleLabel(&quot;This test is modified by JSR223 script&quot;);
 
//set Start Time
def start = System.currentTimeMillis(); //return current time in milliseconds
prev.setStartTime(start); // set StartTime
log.info(&quot;Start Time : &quot; + (new Date(start)).toString()); //print the start time in Date format
//set Response Code
prev.setResponseCode(&quot;201&quot;);
//set Response Message
prev.setResponseMessage(&quot;Simple test via JSR223 script&quot;);
//set Response Data
prev.setResponseData(&quot;Set simple data&quot;, &quot;UTF-8&quot;)
log.info( &quot;The Sample Label is : &quot; + prev.getSampleLabel() );
log.info( &quot;The Start Time in miliseconds is : &quot; + prev.getStartTime() );
log.info( &quot;The Response Code is : &quot; + prev.getResponseCode() );
log.info( &quot;The Response Message is : &quot; + prev.getResponseMessage() );
log.info( &quot;The Response Data is : &quot; + prev.getResponseData() );
log.info( &quot;The Response Data String is : &quot; + prev.getResponseDataAsString() );
AssertionResult assertionResult = new AssertionResult(&quot;JSR223 set assert&quot;).setResultForFailure(&quot;Error msg&quot;);
assertionResult.setError(true);
assertionResult.setFailure(true);
prev.addAssertionResult(assertionResult);


log.info( &quot;The Response getAssertionResults is : &quot; + prev.getAssertionResults() );
 
</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.assertions.AssertionResult;

//set Sample Label
prev.setSampleLabel(&quot;This test is modified by JSR223 script&quot;);
 
//set Start Time
def start = System.currentTimeMillis(); //return current time in milliseconds
prev.setStartTime(start); // set StartTime
log.info(&quot;Start Time : &quot; + (new Date(start)).toString()); //print the start time in Date format
//set Response Code
prev.setResponseCode(&quot;201&quot;);
//set Response Message
prev.setResponseMessage(&quot;Simple test via JSR223 script&quot;);
//set Response Data
prev.setResponseData(&quot;Set simple data&quot;, &quot;UTF-8&quot;)
log.info( &quot;The Sample Label is : &quot; + prev.getSampleLabel() );
log.info( &quot;The Start Time in miliseconds is : &quot; + prev.getStartTime() );
log.info( &quot;The Response Code is : &quot; + prev.getResponseCode() );
log.info( &quot;The Response Message is : &quot; + prev.getResponseMessage() );
log.info( &quot;The Response Data is : &quot; + prev.getResponseData() );
log.info( &quot;The Response Data String is : &quot; + prev.getResponseDataAsString() );
AssertionResult assertionResult = new AssertionResult(&quot;JSR223 set assert&quot;).setResultForFailure(&quot;Error msg&quot;);
assertionResult.setError(true);
assertionResult.setFailure(true);
prev.addAssertionResult(assertionResult);


log.info( &quot;The Response getAssertionResults is : &quot; + prev.getAssertionResults() );
def assertionResult = SampleResult.getAssertionResults()[0]
if (assertionResult.isFailure()) {
    log.info(&quot;Assertion &quot; + assertionResult.getName() + &quot; failed&quot;)
    log.info(assertionResult.getFailureMessage())
}
 
</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="sampler" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.baidu.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//sampler.setDomain(&quot;www.csdn.com&quot;);
//sampler.setPath(&quot;/api/test&quot;);
//sampler.setProtocol(&quot;HTTP&quot;);
//sampler.setMethod(&quot;GET&quot;);
//sampler.setPort(80);

log.info(&quot;Sampler Name is: &quot; + sampler.sample().toString());
log.info(&quot;Domain is: &quot; + sampler.getDomain());
log.info(&quot;Path is: &quot; + sampler.getPath());
log.info(&quot;Port is: &quot; + sampler.getPort().toString());
log.info(&quot;Protocol is: &quot; + sampler.getProtocol());
log.info(&quot;Method is: &quot; + sampler.getMethod());</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
log.info( &quot;The Sample Label is : &quot; + prev.getSampleLabel() );
log.info( &quot;The Start Time in miliseconds is : &quot; + prev.getStartTime() );
log.info( &quot;The Response Code is : &quot; + prev.getResponseCode() );
log.info( &quot;The Response Message is : &quot; + prev.getResponseMessage() );
log.info( &quot;The Response Data is : &quot; + prev.getResponseData() );
log.info( &quot;The Response Data String is : &quot; + prev.getResponseDataAsString() );

</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">
log.info( &quot;The Sample Label is : &quot; + prev.getSampleLabel() );
log.info( &quot;The Start Time in miliseconds is : &quot; + prev.getStartTime() );
log.info( &quot;The Response Code is : &quot; + prev.getResponseCode() );
log.info( &quot;The Response Message is : &quot; + prev.getResponseMessage() );
log.info( &quot;The Response Data is : &quot; + prev.getResponseData() );
log.info( &quot;The Response Data String is : &quot; + prev.getResponseDataAsString() );

</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ctx" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.baidu.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">log.info(&quot;==================================================&quot;);
log.info(&quot;Current Sampler: &quot; + ctx.getCurrentSampler());
log.info(&quot;JMeter Engine: &quot; + ctx.getEngine());
// get previous result
log.info(&quot;Previous Response Message : &quot; + ctx.getPreviousResult().getResponseMessage());
log.info(&quot;Previous Response Code : &quot; + ctx.getPreviousResult().getResponseCode());
log.info(&quot;Previous Response URL : &quot; + ctx.getPreviousResult().getURL());
log.info(&quot;Previous Response Time : &quot; + ctx.getPreviousResult().getTime());
log.info(&quot;==================================================&quot;);
// get previous sampler
log.info(&quot;Previous Domain : &quot; + ctx.getPreviousSampler().getDomain());
log.info(&quot;Previous Protocol : &quot; + ctx.getPreviousSampler().getProtocol());
log.info(&quot;Previous Port : &quot; + ctx.getPreviousSampler().getPort());
log.info(&quot;Previous Method : &quot; + ctx.getPreviousSampler().getMethod());
log.info(&quot;==================================================&quot;);
//get Thread infomations
log.info(&quot;Thread Name : &quot; + ctx.getThread().getThreadName());
log.info(&quot;Thread Start Time : &quot; + ctx.getThread().getStartTime());
log.info(&quot;Thread End Time : &quot; + ctx.getThread().getEndTime());
log.info(&quot;Thread Number : &quot; + ctx.getThreadNum());

// Thread Group
log.info(&quot;Start Next Thread Loop on Error: &quot; + ctx.getThreadGroup().getOnErrorStartNextLoop());
log.info(&quot;Stop Test while Error: &quot; + ctx.getThreadGroup().getOnErrorStopTest());</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
